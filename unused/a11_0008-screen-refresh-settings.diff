screen refresh rate control from byzyb's diff
--- a/packages/apps/Settings/res/values/cm_arrays.xml
+++ b/packages/apps/Settings/res/values/cm_arrays.xml
@@ -49,4 +49,27 @@
     <!-- Override supported color mode labels.
          NOTE: This list must have the exact same items count as config_availableColorModes -->
     <string-array name="available_vendor_color_modes" translatable="false" />
+
+    <!-- Display settings. The minimum refresh rate of screen. These are shown in a list dialog. -->
+    <string-array name="screen_refresh_rate_entries">
+        <item>30 Hz</item>
+        <item>48 Hz</item>
+        <item>50 Hz</item>
+        <item>60 Hz</item>
+        <item>75 Hz</item>
+    </string-array>
+
+    <!-- Do not translate. -->
+    <string-array name="screen_refresh_rate_values" translatable="false">
+        <!-- Do not translate. -->
+        <item>30</item>
+        <!-- Do not translate. -->
+        <item>48</item>
+        <!-- Do not translate. -->
+        <item>50</item>
+        <!-- Do not translate. -->
+        <item>60</item>
+        <!-- Do not translate. -->
+        <item>75</item>
+    </string-array>
 </resources>

--- a/packages/apps/Settings/res/values/cm_strings.xml
+++ b/packages/apps/Settings/res/values/cm_strings.xml
@@ -176,6 +176,20 @@
     <!-- Display settings screen, peak refresh rate settings summary [CHAR LIMIT=NONE] -->
     <string name="peak_refresh_rate_summary_custom">Automatically raises the refresh rate from 60 to %1$d Hz for some content. Increases battery usage.</string>
 
+    <!-- Sound & display settings screen, setting option name to change screen refresh rate -->
+    <string name="screen_refresh_rate">Screen refresh rate</string>
+
+    <!-- Sound & display settings screen, setting option name to change screen refresh rate [CHAR LIMIT=30] -->
+    <string name="screen_refresh_rate_title">Screen refresh rate</string>
+
+    <!-- Sound & display settings screen, setting option summary to change screen refresh rate -->
+    <string name="screen_refresh_rate_summary">
+        <xliff:g id="refresh_rate_description">%1$s</xliff:g>
+    </string>
+
+    <!-- List of synonyms for the screen refresh rate setting, used to match in settings search [CHAR LIMIT=NONE] -->
+    <string name="keywords_screen_refresh_rate">screen, refresh rate</string>
+
     <!-- Warning message for the sd card setup -->
     <string name="storage_warning_internal">Warning: This option may not work properly or lead to data loss and is therefore not recommended!</string>
 </resources>


--- a/packages/apps/Settings/res/xml/display_settings.xml
+++ b/packages/apps/Settings/res/xml/display_settings.xml
@@ -76,6 +76,14 @@
         android:entryValues="@array/screen_timeout_values"
         settings:keywords="@string/keywords_screen_timeout" />

+    <com.android.settings.display.RefreshRateListPreference
+        android:key="screen_refresh_rate"
+        android:title="@string/screen_refresh_rate"
+        android:summary="@string/summary_placeholder"
+        android:entries="@array/screen_refresh_rate_entries"
+        android:entryValues="@array/screen_refresh_rate_values"
+        settings:keywords="@string/keywords_screen_refresh_rate" />
+
     <Preference
         android:key="adaptive_sleep_entry"
         android:title="@string/adaptive_sleep_title"

--- a/packages/apps/Settings/src/com/android/settings/DisplaySettings.java
+++ b/packages/apps/Settings/src/com/android/settings/DisplaySettings.java
@@ -31,6 +31,7 @@ import com.android.settings.display.ShowOperatorNamePreferenceController;
 import com.android.settings.display.TapToWakePreferenceController;
 import com.android.settings.display.ThemePreferenceController;
 import com.android.settings.display.TimeoutPreferenceController;
+import com.android.settings.display.RefreshRatePreferenceController;
 import com.android.settings.display.VrDisplayPreferenceController;
 import com.android.settings.search.BaseSearchIndexProvider;
 import com.android.settingslib.core.AbstractPreferenceController;
@@ -49,6 +50,7 @@ public class DisplaySettings extends DashboardFragment {
     public static final String KEY_PROXIMITY_ON_WAKE = "proximity_on_wake";

     private static final String KEY_SCREEN_TIMEOUT = "screen_timeout";
+    private static final String KEY_SCREEN_REFRESH_RATE = "screen_refresh_rate";
     private static final String KEY_HIGH_TOUCH_SENSITIVITY = "high_touch_sensitivity_enable";

     @Override
@@ -91,6 +93,7 @@ public class DisplaySettings extends DashboardFragment {
         controllers.add(new ScreenSaverPreferenceController(context));
         controllers.add(new TapToWakePreferenceController(context));
         controllers.add(new TimeoutPreferenceController(context, KEY_SCREEN_TIMEOUT));
+        controllers.add(new RefreshRatePreferenceController(context, KEY_SCREEN_REFRESH_RATE));
         controllers.add(new VrDisplayPreferenceController(context));
         controllers.add(new ShowOperatorNamePreferenceController(context));
         controllers.add(new ThemePreferenceController(context));


--- /dev/null
+++ b/packages/apps/Settings/src/com/android/settings/display/RefreshRateListPreference.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2022 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.android.settings.display;
+
+import android.app.Dialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.util.AttributeSet;
+import android.view.View;
+
+import androidx.appcompat.app.AlertDialog.Builder;
+
+import com.android.settings.RestrictedListPreference;
+
+
+public class RefreshRateListPreference extends RestrictedListPreference {
+    private final CharSequence[] mInitialEntries;
+    private final CharSequence[] mInitialValues;
+
+    public RefreshRateListPreference(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        mInitialEntries = getEntries();
+        mInitialValues = getEntryValues();
+    }
+
+    @Override
+    protected void onPrepareDialogBuilder(Builder builder, DialogInterface.OnClickListener listener) {
+        super.onPrepareDialogBuilder(builder, listener);
+        builder.setView(null);
+    }
+
+    @Override
+    protected void onDialogCreated(Dialog dialog) {
+        super.onDialogCreated(dialog);
+        dialog.create();
+    }
+}


--- /dev/null
+++ b/packages/apps/Settings/src/com/android/settings/display/RefreshRatePreferenceController.java
@@ -0,0 +1,122 @@
+/*
+ * Copyright (C) 2022 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.android.settings.display;
+
+import android.content.Context;
+import android.os.SystemProperties;
+import android.util.Log;
+
+import androidx.preference.Preference;
+
+import com.android.settings.R;
+import com.android.settings.core.PreferenceControllerMixin;
+import com.android.settingslib.core.AbstractPreferenceController;
+
+import java.io.File;
+import java.io.FileReader;
+import java.io.FileWriter;
+
+
+public class RefreshRatePreferenceController extends AbstractPreferenceController implements PreferenceControllerMixin, Preference.OnPreferenceChangeListener {
+    private static final String TAG = "RefreshRatePrefContr";
+    private final String mScreenRefreshRateKey;
+
+    public RefreshRatePreferenceController(Context context, String key) {
+        super(context);
+        mScreenRefreshRateKey = key;
+    }
+
+    @Override
+    public boolean isAvailable() {
+        final String product = SystemProperties.get("ro.build.product", "");
+        return product.equals("aqua") || product.equals("libra");
+    }
+
+    @Override
+    public String getPreferenceKey() {
+        return mScreenRefreshRateKey;
+    }
+
+    @Override
+    public void updateState(Preference preference) {
+        final RefreshRateListPreference refreshrateListPreference = (RefreshRateListPreference) preference;
+        refreshrateListPreference.setValue(String.valueOf(getRefreshRate()));
+        updateRefreshRatePreferenceDescription(refreshrateListPreference, Integer.parseInt(refreshrateListPreference.getValue()));
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        final int value = Integer.parseInt((String) newValue);
+        setRefreshRate(value);
+        if (value != getRefreshRate()) {
+            Log.w(TAG, "cannot change screen refresh rate to unsupported value: " + String.valueOf(value));
+        }
+        updateRefreshRatePreferenceDescription((RefreshRateListPreference) preference, value);
+        return true;
+    }
+
+    public static CharSequence getRefreshRateDescription(int currentRefreshRate, CharSequence[] entries, CharSequence[] values) {
+        if (currentRefreshRate < 0 || entries == null || values == null || values.length != entries.length) {
+            return null;
+        }
+
+        for (int i = 0; i < values.length; i++) {
+            if (currentRefreshRate == Integer.parseInt(values[i].toString())) {
+                return entries[i];
+            }
+        }
+        return null;
+    }
+
+    private void updateRefreshRatePreferenceDescription(RefreshRateListPreference preference, int currentRefreshRate) {
+        final CharSequence[] entries = preference.getEntries();
+        final CharSequence[] values = preference.getEntryValues();
+        final CharSequence refreshrateDescription = getRefreshRateDescription(currentRefreshRate, entries, values);
+        final String summary = refreshrateDescription == null ? "" : mContext.getString(R.string.screen_refresh_rate_summary, refreshrateDescription);
+        preference.setSummary(summary);
+    }
+
+    private int getRefreshRate() {
+        File file = new File("/sys/class/graphics/fb0/dynamic_fps");
+        if (file.exists()) {
+            try {
+                FileReader filereader = new FileReader(file);
+                final int currentValue = (filereader.read() - '0') * 10 + (filereader.read() - '0');
+                filereader.close();
+                return currentValue;
+            } catch (Exception e) {
+                Log.e(TAG, "cannot get screen refresh rate", e);
+            }
+        } else {
+            Log.e(TAG, "File not found: /sys/class/graphics/fb0/dynamic_fps");
+        }
+        return -1;
+    }
+
+    private void setRefreshRate(int newValue) {
+        File file = new File("/sys/class/graphics/fb0/dynamic_fps");
+        if (file.exists()) {
+            try {
+                FileWriter filewriter = new FileWriter(file);
+                filewriter.write(String.valueOf(newValue));
+                filewriter.close();
+            } catch (Exception e) {
+                Log.e(TAG, "cannot set screen refresh rate", e);
+            }
+        } else {
+            Log.e(TAG, "File not found: /sys/class/graphics/fb0/dynamic_fps");
+        }
+    }
+}
