from BYZYB's diff
--- a/packages/apps/LineageParts/res/values/strings.xml
+++ b/packages/apps/LineageParts/res/values/strings.xml
@@ -215,6 +215,8 @@
     <string name="home_answer_call_summary">Answer incoming calls by pressing the home button</string>
     <string name="extras_title">Extras</string>
     <string name="additional_buttons_title">Additional buttons</string>
+    <string name="edge_gesture_title">Edge gesture</string>
+    <string name="edge_gesture_summary">Double tap the phone\'s edge causes back</string>
     <string name="click_partial_screenshot_title">Click to partial screenshot</string>
     <string name="click_partial_screenshot_summary">Short click Volume Down and Power to take partial screenshot</string>

@@ -596,6 +598,8 @@
     <string name="auto_power_save_summary_on">Automatically enable power save mode at %s battery</string>
     <string name="auto_power_save_summary_off">Do not enable power save mode automatically</string>
     <string name="auto_power_save_never">Never</string>
+    <string name="cpu_overclock_title">High performance mode</string>
+    <string name="cpu_overclock_summary">Increase maximum CPU power to improve performance, at the cost of battery life</string>

     <!-- Applications: Long screen -->
     <string name="long_screen_settings_title">Full screen apps</string>


--- a/packages/apps/LineageParts/res/xml/button_settings.xml
+++ b/packages/apps/LineageParts/res/xml/button_settings.xml
@@ -336,6 +336,12 @@
                 android:action="org.lineageos.settings.device.ADDITIONAL_BUTTONS_SETTINGS" />
         </lineageos.preference.RemotePreference>

+        <SwitchPreference
+            android:key="edge_gesture"
+            android:title="@string/edge_gesture_title"
+            android:summary="@string/edge_gesture_summary"
+            android:persistent="false" />
+
         <lineageos.preference.LineageSystemSettingSwitchPreference
             android:key="click_partial_screenshot"
             android:title="@string/click_partial_screenshot_title"

--- a/packages/apps/LineageParts/res/xml/perf_profile_settings.xml
+++ b/packages/apps/LineageParts/res/xml/perf_profile_settings.xml
@@ -37,6 +37,18 @@

     </PreferenceCategory>

+    <PreferenceCategory
+        android:key="cpu_overclock_category"
+        android:title="@string/advanced">
+
+        <SwitchPreference
+            android:key="cpu_overclock"
+            android:title="@string/cpu_overclock_title"
+            android:summary="@string/cpu_overclock_summary"
+            android:persistent="false" />
+
+    </PreferenceCategory>
+
     <PreferenceCategory
         android:key="perf_profile_category"
         android:title="@string/perf_profile_category_title">

--- a/packages/apps/LineageParts/src/org/lineageos/lineageparts/input/ButtonSettings.java
+++ b/packages/apps/LineageParts/src/org/lineageos/lineageparts/input/ButtonSettings.java
@@ -29,6 +29,7 @@ import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.RemoteException;
+import android.os.SystemProperties;
 import android.os.UserHandle;
 import android.provider.Settings;
 import android.util.ArraySet;
@@ -103,6 +104,7 @@ public class ButtonSettings extends SettingsPreferenceFragment
             "torch_long_press_power_gesture";
     private static final String KEY_TORCH_LONG_PRESS_POWER_TIMEOUT =
             "torch_long_press_power_timeout";
+    private static final String KEY_EDGE_GESTURE = "edge_gesture";
     private static final String KEY_CLICK_PARTIAL_SCREENSHOT =
             "click_partial_screenshot";
     private static final String KEY_SWAP_CAPACITIVE_KEYS = "swap_capacitive_keys";
@@ -118,6 +120,7 @@ public class ButtonSettings extends SettingsPreferenceFragment
     private static final String CATEGORY_BACKLIGHT = "key_backlight";
     private static final String CATEGORY_NAVBAR = "navigation_bar_category";
     private static final String CATEGORY_EXTRAS = "extras_category";
+    private static final String PRODUCT = SystemProperties.get("ro.build.product", "");

     private ListPreference mBackLongPressAction;
     private ListPreference mHomeLongPressAction;
@@ -147,6 +150,7 @@ public class ButtonSettings extends SettingsPreferenceFragment
     private SwitchPreference mHomeAnswerCall;
     private SwitchPreference mTorchLongPressPowerGesture;
     private ListPreference mTorchLongPressPowerTimeout;
+    private SwitchPreference mEdgeGesture;
     private SwitchPreference mSwapCapacitiveKeys;

     private PreferenceCategory mNavigationPreferencesCat;
@@ -470,6 +474,17 @@ public class ButtonSettings extends SettingsPreferenceFragment
             mSwapCapacitiveKeys.setDependency(KEY_DISABLE_NAV_KEYS);
         }

+        // Edge gesture controller
+        mEdgeGesture = findPreference(KEY_EDGE_GESTURE);
+
+        if (mEdgeGesture != null) {
+            if (PRODUCT.equals("libra")) {
+                mEdgeGesture.setChecked(SystemProperties.getBoolean("persist.vendor.edge_touch_mode", false));
+            } else {
+                extrasCategory.removePreference(mEdgeGesture);
+            }
+        }
+
         // Override key actions on Go devices in order to hide any unsupported features
         if (ActivityManager.isLowRamDeviceStatic()) {
             String[] actionEntriesGo = res.getStringArray(R.array.hardware_keys_action_entries_go);
@@ -552,6 +567,13 @@ public class ButtonSettings extends SettingsPreferenceFragment
                 (incallHomeBehavior == LineageSettings.Secure.RING_HOME_BUTTON_BEHAVIOR_ANSWER);
             mHomeAnswerCall.setChecked(homeButtonAnswersCall);
         }
+
+        // Get edge gesture status.
+        if (mEdgeGesture != null) {
+            if (PRODUCT.equals("libra")) {
+                mEdgeGesture.setChecked(SystemProperties.getBoolean("persist.vendor.edge_touch_mode", false));
+            }
+        }
     }

     private ListPreference initList(String key, Action value) {
@@ -837,6 +859,11 @@ public class ButtonSettings extends SettingsPreferenceFragment
         } else if (preference == mHomeAnswerCall) {
             handleToggleHomeButtonAnswersCallPreferenceClick();
             return true;
+        } else if (preference == mEdgeGesture) {
+            if (PRODUCT.equals("libra")) {
+                SystemProperties.set("persist.vendor.edge_touch_mode", mEdgeGesture.isChecked() ? "true" : "false");
+            }
+            return true;
         }

         return super.onPreferenceTreeClick(preference);

--- a/packages/apps/LineageParts/src/org/lineageos/lineageparts/power/PerfProfileSettings.java
+++ b/packages/apps/LineageParts/src/org/lineageos/lineageparts/power/PerfProfileSettings.java
@@ -28,6 +28,7 @@ import android.graphics.drawable.AnimatedVectorDrawable;
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.PowerManager;
+import android.os.SystemProperties;
 import android.provider.Settings.Global;
 import android.util.ArraySet;
 import android.util.TypedValue;
@@ -65,9 +66,13 @@ public class PerfProfileSettings extends SettingsPreferenceFragment
     private static final String KEY_AUTO_POWER_SAVE  = "auto_power_save";
     private static final String KEY_POWER_SAVE       = "power_save";
     private static final String KEY_PERF_SEEKBAR     = "perf_seekbar";
+    private static final String KEY_CPU_OVERCLOCK_CATEGORY = "cpu_overclock_category";
+    private static final String KEY_CPU_OVERCLOCK    = "cpu_overclock";
+    private static final String PRODUCT = SystemProperties.get("ro.build.product", "");

     private ListPreference mAutoPowerSavePref;
     private SwitchPreference   mPowerSavePref;
+    private SwitchPreference   mCPUOverclockPref;

     private SeekBarPreference        mPerfSeekBar;
     private StopMotionVectorDrawable mPerfDrawable;
@@ -96,6 +101,7 @@ public class PerfProfileSettings extends SettingsPreferenceFragment
         mPerfSeekBar = findPreference(KEY_PERF_SEEKBAR);
         mAutoPowerSavePref = findPreference(KEY_AUTO_POWER_SAVE);
         mPowerSavePref = findPreference(KEY_POWER_SAVE);
+        mCPUOverclockPref = findPreference(KEY_CPU_OVERCLOCK);

         mPowerManager = getActivity().getSystemService(PowerManager.class);
         mPerf = PerformanceManager.getInstance(getActivity());
@@ -126,6 +132,13 @@ public class PerfProfileSettings extends SettingsPreferenceFragment
         updateAutoPowerSaveValue();
         mAutoPowerSavePref.setOnPreferenceChangeListener(this);
         mPowerSavePref.setOnPreferenceChangeListener(this);
+
+        if (PRODUCT.equals("aqua") || PRODUCT.equals("libra")) {
+            mCPUOverclockPref.setChecked(SystemProperties.getBoolean("persist.sys.cpu_overclock", false));
+            mCPUOverclockPref.setOnPreferenceChangeListener(this);
+        } else {
+            removePreference(KEY_CPU_OVERCLOCK_CATEGORY);
+        }
     }


@@ -212,6 +225,12 @@ public class PerfProfileSettings extends SettingsPreferenceFragment
             getActivity().registerReceiver(mPowerSaveReceiver,
                     new IntentFilter(PowerManager.ACTION_POWER_SAVE_MODE_CHANGING));
         }
+
+        if (mCPUOverclockPref != null) {
+            if (PRODUCT.equals("aqua") || PRODUCT.equals("libra")) {
+                mCPUOverclockPref.setChecked(SystemProperties.getBoolean("persist.sys.cpu_overclock", false));
+            }
+        }
     }

     @Override
@@ -246,6 +265,10 @@ public class PerfProfileSettings extends SettingsPreferenceFragment
             final int level = Integer.parseInt((String) newValue);
             Global.putInt(getContentResolver(), Global.LOW_POWER_MODE_TRIGGER_LEVEL, level);
             updateAutoPowerSaveSummary(level);
+        } else if (preference == mCPUOverclockPref) {
+            if (PRODUCT.equals("aqua") || PRODUCT.equals("libra")) {
+                SystemProperties.set("persist.sys.cpu_overclock", mCPUOverclockPref.isChecked() ? "false" : "true");
+            }
         }
         return true;
     }

