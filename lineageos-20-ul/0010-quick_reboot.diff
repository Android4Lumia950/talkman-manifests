From ec74cd1a5198c60d558ab0c6ebdc4da21ebc13b7 Mon Sep 17 00:00:00 2001
From: Yaroslav Zviezda <acroreiser@gmail.com>
Date: Mon, 20 Feb 2023 20:38:39 +0300
Subject: [PATCH] reboot must be fast on legacy too

Change-Id: I591d36fe86e68f391a8e11773bd91368c946b477
https://github.com/LineageOS-UL/android_system_core/commit/ec74cd1a5198c60d558ab0c6ebdc4da21ebc13b7
Backport to los 20
--- a/system/core/init/reboot.cpp	2025-04-23 09:37:32.235053157 +0800
+++ b/system/core/init/reboot.cpp	2025-04-25 15:42:47.536841508 +0800
@@ -423,17 +423,21 @@
         return UMOUNT_STAT_ERROR;
     }
 
-    UmountStat stat = UmountPartitions(timeout - t.duration());
-    if (stat != UMOUNT_STAT_SUCCESS) {
-        LOG(INFO) << "umount timeout, last resort, kill all and try";
-        if (DUMP_ON_UMOUNT_FAILURE) DumpUmountDebuggingInfo();
-        KillAllProcesses();
-        // even if it succeeds, still it is timeout and do not run fsck with all processes killed
-        UmountStat st = UmountPartitions(0ms);
-        if ((st != UMOUNT_STAT_SUCCESS) && DUMP_ON_UMOUNT_FAILURE) DumpUmountDebuggingInfo();
-    }
+    LOG(INFO) << "Terminate all processes unconditionally...";
+    WriteStringToFile("e", PROC_SYSRQ);
+
+    LOG(INFO) << "Is anyone still alive? Kill them!";
+    KillAllProcesses();
+
+    LOG(INFO) << "Now remount all filesystems to RO";
+    WriteStringToFile("u", PROC_SYSRQ);
 
-    if (stat == UMOUNT_STAT_SUCCESS && run_fsck) {
+    LOG(INFO) << "Unmount all partitions";
+    // even if it succeeds, still it is timeout and do not run fsck with all processes killed
+    UmountStat st = UmountPartitions(0ms);
+    if ((st != UMOUNT_STAT_SUCCESS) && DUMP_ON_UMOUNT_FAILURE) DumpUmountDebuggingInfo();
+
+    if (st == UMOUNT_STAT_SUCCESS && run_fsck) {
         LOG(INFO) << "Pause reboot monitor thread before fsck";
         sem_post(reboot_semaphore);
 
@@ -446,7 +450,7 @@
         LOG(INFO) << "Resume reboot monitor thread after fsck";
         sem_post(reboot_semaphore);
     }
-    return stat;
+    return st;
 }
 
 // zram is able to use backing device on top of a loopback device.
@@ -703,17 +707,6 @@
         }
     }
 
-    // optional shutdown step
-    // 1. terminate all services except shutdown critical ones. wait for delay to finish
-    if (shutdown_timeout > 0ms) {
-        StopServicesAndLogViolations(stop_first, shutdown_timeout / 2, true /* SIGTERM */);
-    }
-    // Send SIGKILL to ones that didn't terminate cleanly.
-    StopServicesAndLogViolations(stop_first, 0ms, false /* SIGKILL */);
-    SubcontextTerminate();
-    // Reap subcontext pids.
-    ReapAnyOutstandingChildren();
-
     // 3. send volume abort_fuse and volume shutdown to vold
     Service* vold_service = ServiceList::GetInstance().FindService("vold");
     if (vold_service != nullptr && vold_service->IsRunning()) {
@@ -725,8 +718,6 @@
     } else {
         LOG(INFO) << "vold not running, skipping vold shutdown";
     }
-    // logcat stopped here
-    StopServices(kDebuggingServices, 0ms, false /* SIGKILL */);
     // 4. sync, try umount, and optionally run fsck for user shutdown
     {
         Timer sync_timer;

