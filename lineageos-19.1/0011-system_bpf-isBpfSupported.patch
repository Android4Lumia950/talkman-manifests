From 6e7f19178c7d82c0c936577ce9291f2da9644418 Mon Sep 17 00:00:00 2001
From: Dominggoes Isakh <drjisakh@gmail.com>
Date: Thu, 25 Nov 2021 21:42:23 +0100
Subject: [PATCH] Bring back isBpfSupported-method, but using
 ro.kernel.ebpf.supported

Change-Id: Ia1122e719b3f7e8302df8ef2cd6128002a291b0c
---
 bpfloader/BpfLoader.cpp               | 27 ++++++++++++++++-----------
 libbpf_android/include/bpf/BpfUtils.h |  4 ++++
 2 files changed, 20 insertions(+), 11 deletions(-)

diff --git a/bpfloader/BpfLoader.cpp b/bpfloader/BpfLoader.cpp
index 7a68894..2fe4754 100644
--- a/system/bpf/bpfloader/BpfLoader.cpp
+++ b/system/bpf/bpfloader/BpfLoader.cpp
@@ -112,17 +112,22 @@ void createSysFsBpfSubDir(const char* const prefix) {
 }
 
 int main() {
-    // Load all ELF objects, create programs and maps, and pin them
-    for (const auto location : locations) {
-        createSysFsBpfSubDir(location.prefix);
-        if (loadAllElfObjects(location.dir, location.prefix) != 0) {
-            ALOGE("=== CRITICAL FAILURE LOADING BPF PROGRAMS FROM %s ===", location.dir);
-            ALOGE("If this triggers reliably, you're probably missing kernel options or patches.");
-            ALOGE("If this triggers randomly, you might be hitting some memory allocation "
-                  "problems or startup script race.");
-            ALOGE("--- DO NOT EXPECT SYSTEM TO BOOT SUCCESSFULLY ---");
-            sleep(20);
-            return 2;
+    bool ebpf_supported = android::bpf::isBpfSupported();
+
+    if (ebpf_supported) {
+        // Load all ELF objects, create programs and maps, and pin them
+        for (const auto location : locations) {
+            createSysFsBpfSubDir(location.prefix);
+            if (loadAllElfObjects(location.dir, location.prefix) != 0) {
+                ALOGE("=== CRITICAL FAILURE LOADING BPF PROGRAMS FROM %s ===", location.dir);
+                ALOGE("If this triggers reliably, you're probably missing kernel options "
+                      "or patches.");
+                ALOGE("If this triggers randomly, you might be hitting some memory allocation "
+                      "problems or startup script race.");
+                ALOGE("--- DO NOT EXPECT SYSTEM TO BOOT SUCCESSFULLY ---");
+                sleep(20);
+                return 2;
+            }
         }
     }
 
diff --git a/libbpf_android/include/bpf/BpfUtils.h b/libbpf_android/include/bpf/BpfUtils.h
index 8fd2a4a..b43dc32 100644
--- a/system/bpf/libbpf_android/include/bpf/BpfUtils.h
+++ b/system/bpf/libbpf_android/include/bpf/BpfUtils.h
@@ -16,6 +16,7 @@
 
 #pragma once
 
+#include <android-base/properties.h>
 #include <linux/if_ether.h>
 #include <net/if.h>
 #include <stdlib.h>
@@ -40,6 +41,9 @@ int setrlimitForTest();
 #define KVER(a, b, c) (((a) << 24) + ((b) << 16) + (c))
 
 unsigned kernelVersion();
+inline bool isBpfSupported() {
+    return android::base::GetBoolProperty("ro.kernel.ebpf.supported", true);
+}
 
 static inline bool isAtLeastKernelVersion(unsigned major, unsigned minor, unsigned sub) {
     return kernelVersion() >= KVER(major, minor, sub);
